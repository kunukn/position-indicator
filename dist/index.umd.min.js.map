{"version":3,"file":"index.umd.min.js","sources":["../src/index.ts"],"sourcesContent":["export type updateEvent = 'init' | 'scroll' | 'resize' | 'heightChange'\n\nexport interface Memory {\n  prevPosition?: number | null\n}\n\nexport interface UpdateParams {\n  position: number\n  prevPosition: number\n  hasUpdated: boolean\n  updateEvent: updateEvent\n  hasScroll: boolean\n  lastUpdated: number\n}\n\nexport interface PositionIndicatorInstance {\n  init: () => void\n  destroy: () => void\n}\n\nexport interface Options {\n  onInit: (data: UpdateParams) => {} | void\n  onUpdate: (data: UpdateParams) => {} | void\n  resizeObserverDisabled: boolean\n}\n\ninterface Events {\n  onScroll?: () => void\n  onResize?: () => void\n  onHeightChange?: () => void\n  resizeObserver?: ResizeObserver\n}\n\nlet _getFullDocumentHeight = () =>\n  Math.max(document.body.scrollHeight, document.documentElement.scrollHeight)\n\nlet _getViewPortHeight = () => window.innerHeight\n\nlet _getScrollYPosition = () => window.pageYOffset\n\nlet _hasScroll = () => _getFullDocumentHeight() > _getViewPortHeight()\n\nlet _clamp = (value: number, min: number, max: number) =>\n  Math.min(Math.max(value, min), max)\n\nlet _onUpdate = (updateEvent: updateEvent, memory: Memory): UpdateParams => {\n  let fullDocumentHeight = _getFullDocumentHeight()\n  let viewPortHeight = _getViewPortHeight()\n  let scrollYPosition = _getScrollYPosition()\n\n  let relative = fullDocumentHeight - viewPortHeight\n  let position = _clamp(scrollYPosition / (relative || 1), 0, 1)\n  let prevPosition = memory.prevPosition\n  memory.prevPosition = position\n  return {\n    position,\n    prevPosition,\n    hasUpdated: position !== prevPosition,\n    updateEvent,\n    hasScroll: _hasScroll(),\n    lastUpdated: Date.now(),\n  }\n}\n\nlet _init = (\n  {\n    onInit: initCallback,\n    onUpdate: updateCallback,\n    resizeObserverDisabled,\n  }: Options,\n  events: Events,\n  memory: Memory\n) => {\n  events.onScroll = () => {\n    if (updateCallback) {\n      updateCallback(_onUpdate('scroll', memory))\n    }\n  }\n  events.onResize = () => {\n    if (updateCallback) {\n      updateCallback(_onUpdate('resize', memory))\n    }\n  }\n\n  if (!resizeObserverDisabled) {\n    events.onHeightChange = () => {\n      if (updateCallback) {\n        updateCallback(_onUpdate('heightChange', memory))\n      }\n    }\n\n    if (typeof ResizeObserver !== 'undefined') {\n      events.resizeObserver = new ResizeObserver(events.onHeightChange)\n      events.resizeObserver.observe(document.body)\n    }\n  }\n\n  /**\n   * Throttling for event is not used.\n   * Because it has the same effect same as rAF.\n   * https://stackoverflow.com/a/44779316/815507\n   */\n  window.addEventListener('scroll', events.onScroll)\n  window.addEventListener('resize', events.onResize)\n\n  initCallback && initCallback(_onUpdate('init', memory))\n}\n\nlet _destroy = (events: Events) => {\n  events.onScroll && window.removeEventListener('scroll', events.onScroll)\n  events.onResize && window.removeEventListener('resize', events.onResize)\n  events.resizeObserver && events.resizeObserver.unobserve(document.body)\n}\n\nexport const createPositionIndicator = (\n  options: Options\n): PositionIndicatorInstance => {\n  let events: Events = {\n    onScroll: null,\n    onResize: null,\n    onHeightChange: null,\n    resizeObserver: null,\n  }\n  let memory: Memory = {}\n\n  return {\n    init: () => _init(options, events, memory),\n    destroy: () => {\n      _destroy(events)\n      events = {}\n      memory = {}\n    },\n  }\n}\n"],"names":["_getFullDocumentHeight","Math","max","document","body","scrollHeight","documentElement","_getViewPortHeight","window","innerHeight","_onUpdate","updateEvent","memory","value","min","fullDocumentHeight","viewPortHeight","scrollYPosition","pageYOffset","position","prevPosition","hasUpdated","hasScroll","lastUpdated","Date","now","options","events","onScroll","onResize","onHeightChange","resizeObserver","init","_a","initCallback","updateCallback","resizeObserverDisabled","ResizeObserver","observe","addEventListener","_init","destroy","removeEventListener","unobserve","_destroy"],"mappings":";;;;;yPAiCA,IAAIA,EAAyB,WAC3B,OAAAC,KAAKC,IAAIC,SAASC,KAAKC,aAAcF,SAASG,gBAAgBD,eAE5DE,EAAqB,WAAM,OAAAC,OAAOC,aASlCC,EAAY,SAACC,EAA0BC,GACzC,IAJYC,EAAeC,EAAaZ,EAIpCa,EAAqBf,IACrBgB,EAAiBT,IACjBU,EAV0BT,OAAOU,YAajCC,GATQN,EASUI,GADPF,EAAqBC,GACiB,GAT1BF,EAS8B,EATjBZ,EASoB,EAR5DD,KAAKa,IAAIb,KAAKC,IAAIW,EAAOC,GAAMZ,IAS3BkB,EAAeR,EAAOQ,aAE1B,OADAR,EAAOQ,aAAeD,EACf,CACLA,WACAC,eACAC,WAAYF,IAAaC,EACzBT,cACAW,UAnBmBtB,IAA2BO,IAoB9CgB,YAAaC,KAAKC,kCAsDiB,SACrCC,GAEA,IAAIC,EAAiB,CACnBC,SAAU,KACVC,SAAU,KACVC,eAAgB,KAChBC,eAAgB,MAEdnB,EAAiB,GAErB,MAAO,CACLoB,KAAM,WAAM,OA9DJ,SACVC,EAKAN,EACAf,OALUsB,WACEC,aACVC,2BAKFT,EAAOC,SAAW,WACZO,GACFA,EAAezB,EAAU,SAAUE,KAGvCe,EAAOE,SAAW,WACZM,GACFA,EAAezB,EAAU,SAAUE,KAIlCwB,IACHT,EAAOG,eAAiB,WAClBK,GACFA,EAAezB,EAAU,eAAgBE,KAIf,oBAAnByB,iBACTV,EAAOI,eAAiB,IAAIM,eAAeV,EAAOG,gBAClDH,EAAOI,eAAeO,QAAQnC,SAASC,QAS3CI,OAAO+B,iBAAiB,SAAUZ,EAAOC,UACzCpB,OAAO+B,iBAAiB,SAAUZ,EAAOE,UAEzCK,GAAgBA,EAAaxB,EAAU,OAAQE,IAqBjC4B,CAAMd,EAASC,EAAQf,IACnC6B,QAAS,YAnBE,SAACd,GACdA,EAAOC,UAAYpB,OAAOkC,oBAAoB,SAAUf,EAAOC,UAC/DD,EAAOE,UAAYrB,OAAOkC,oBAAoB,SAAUf,EAAOE,UAC/DF,EAAOI,gBAAkBJ,EAAOI,eAAeY,UAAUxC,SAASC,MAiB9DwC,CAASjB,GACTA,EAAS,GACTf,EAAS"}